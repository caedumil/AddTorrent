#!/usr/bin/env  python3

#Copyright (c) 2016-2020 Carlos Millett
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.


import codecs
import hashlib
import argparse
import configparser
import urllib.parse
from os import environ
from pathlib import Path
from requests.exceptions import ConnectionError

import bencodepy
import transmission_rpc
from pydbus import SessionBus


class Config():
    def __init__(self, server='localhost', port='9091', user=None, passw=None):
        self._server = server
        self._port = port
        self._user = user
        self._passw = passw

    @property
    def server(self):
        return self._server

    @property
    def port(self):
        return self._port

    @property
    def user(self):
        return self._user

    @property
    def passw(self):
        return self._passw


def cli():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-p',
        '--profile',
        type=str,
        default='default',
        help='Define profile to read from config file.'
    )
    parser.add_argument(
        '-n',
        '--notify',
        action='store_true',
        help='Use Desktop Notification for output.'
    )
    parser.add_argument(
        'torrent',
        metavar='TORRENT',
        type=str,
        help='torrent/magnet link to add to transmission.'
    )
    return parser


def conf(profile):
    configPath = Path(
        environ.get('XDG_CONFIG_HOME', '~/.config')
    ).expanduser()
    configPath = configPath / 'addtorrent.conf'

    configFile = configparser.ConfigParser()
    configFile.read(configPath)

    opts = Config(
        configFile.get(profile, 'SERVER', fallback='localhost'),
        configFile.get(profile, 'PORT', fallback='9091'),
        configFile.get(profile, 'USER', fallback=None),
        configFile.get(profile, 'PASSW', fallback=None),
    )
    return opts


# function adapted from 'https://github.com/thomasleveil/magneturi'
def torrent2magnet(torrent_data):
    metadata = bencodepy.decode(torrent_data)
    hash_contents = bencodepy.bencode(metadata[b'info'])
    digest = hashlib.sha1(hash_contents).digest()
    hexhash = codecs.encode(digest, 'hex')

    if b'announce-list' in metadata:
        tracker_list = ''.join(
            ['&tr='+urllib.parse.quote_plus(t[0]) for t in metadata[b'announce-list']]
        )
    elif b'announce' in metadata:
        tracker_list = '&tr='+urllib.parse.quote_plus(metadata[b'announce'])
    else:
        tracker_list = ''

    result = ''.join([hexhash.decode('ASCII'), tracker_list])
    return f'magnet:?xt=urn:btih:{result}'


def print_msg(notify, summary, text):
    if notify:
        bus = SessionBus()
        bubble = bus.get('.Notifications')
        bubble.Notify(
            'Torrent',
            0,
            'dialog-information',
            summary,
            text,
            [],
            {},
            -1
        )

    else:
        print('{}: {}'.format(summary, text))


def main():
    parser = cli()
    args = parser.parse_args()
    opts = conf(args.profile)

    if args.torrent.endswith('.torrent'):
        torrent = Path(args.torrent)
        magnet = torrent2magnet(torrent.read_bytes())
    elif args.torrent.startswith('magnet:'):
        magnet = args.torrent
    else:
        print_msg(args.notify, 'Error', 'Not a torrent file or magnet link.')
        return 1

    summary = ''
    text = ''
    status = 0
    try:
        transmission = transmission_rpc.Client(
            username=opts.user,
            password=opts.passw,
            host=opts.server,
            port=opts.port
        )
        torrent = transmission.add_torrent(magnet)

    except transmission_rpc.error.TransmissionError as err:
        summary = 'Transmission'
        text = err.message
        status = 1

    except ConnectionError:
        summary = 'Connection'
        text = 'Failed to establish connection.'
        status = 1

    else:
        summary = 'Added'
        text = torrent.name

    print_msg(args.notify, summary, text)
    return status


if __name__ == '__main__':
    main()
